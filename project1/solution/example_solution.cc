// this is a silly solution
// just to show you how different
// components of this framework work
// please bring your wise to write
// a 'real' solution :)

#include <iostream>
#include <fstream>
#include <string>
#include "../../include/IR.h"
#include "../../3rdparty/jsoncpp/include/json/json.h"
#include "../../include/mytest.h"
#include "../../include/y.tab.h"

extern std::map<std::string, std::pair<int, int>> global_map;
extern std::map<std::string, std::vector<size_t>> global_shape_map;
int main()
{
    std::string cheat_src =
        "// this is supposed to be generated by codegen tool\n\
#include \"../run.h\"\n\
\n\
void kernel_example(float (&B)[32][16], float (&C)[32][16], float (&A)[32][16]) {\n\
    for (int i = 0; i < 32; ++i) {\n\
        for (int j = 0; j < 16; ++j) {\n\
            A[i][j] = B[i][j] * C[i][j];\n\
        }\n\
    }\n\
}";
    Boost::Internal::Ref<const Boost::Internal::IRNode> myroot;

    Json::CharReaderBuilder reader_builder;
    Json::Value root;
    JSONCPP_STRING errs;
    std::ofstream ofile("./kernels/kernel_example.cc", std::ios::out);
    std::ifstream infile("./cases/case4.json", std::ios::binary);
    if (!infile.is_open())
    {
        std::cout << "open file failed";
    }
    bool parse_ok = Json::parseFromStream(reader_builder, infile, &root, &errs);
    if (!parse_ok)
    {
        std::cout << "parse failed";
    }
    std::string str = root["kernel"].asString();
    myroot = yyparse_string((char *)(str.c_str()));
    std::shared_ptr<Boost::Internal::Kernel> myroot_kernel = std::const_pointer_cast<Boost::Internal::Kernel>(std::dynamic_pointer_cast<const Boost::Internal::Kernel>(myroot.real_ptr()));
    std::set<std::string> array_recorded;
    for (auto item : root["ins"])
    {
        std::string varname = item.asString();
        if (array_recorded.find(varname) != array_recorded.end())
            continue;
        array_recorded.insert(varname);
        std::shared_ptr<Boost::Internal::Var> ptr = std::make_shared<Boost::Internal::Var>(Boost::Internal::Type::float_scalar(32), "(&" + varname + ")", std::vector<Boost::Internal::Expr>(), global_shape_map[varname]);
        for (auto dim : ptr->shape)
        {
            ptr->args.push_back(int(dim));
        }
        myroot_kernel->inputs.push_back(std::const_pointer_cast<const Boost::Internal::Var>(ptr));
    }
    for (auto item : root["outs"])
    {
        std::string varname = item.asString();
        if (array_recorded.find(varname) != array_recorded.end())
            continue;
        array_recorded.insert(varname);
        std::shared_ptr<Boost::Internal::Var> ptr = std::make_shared<Boost::Internal::Var>(Boost::Internal::Type::float_scalar(32), "(&" + varname + ")", std::vector<Boost::Internal::Expr>(), global_shape_map[varname]);
        for (auto dim : ptr->shape)
        {
            ptr->args.push_back(int(dim));
        }
        myroot_kernel->outputs.push_back(std::const_pointer_cast<const Boost::Internal::Var>(ptr));
    }
    myroot_kernel->printer_data_type = root["data_type"].asString();
    myroot_kernel->name = root["name"].asString();
    ofile << cheat_src;
    //演示返回的是id节点。下面这一行进行类型强转，访问id节点的value属性，输出到example.cc里，所以make的时候会报错。
    // ofile << (std::dynamic_pointer_cast<const Boost::Internal::Kernel>(myroot.real_ptr())->stmt_list.size());
    // ofile << str;
    ofile << myroot_kernel->name;

    ofile.close();
    return 0;
}